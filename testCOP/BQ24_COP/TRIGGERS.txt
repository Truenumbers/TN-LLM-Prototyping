{"triggerDefinitions": [{"id": "dd48d24e-f78d-4245-b41a-f8ff768f4691", "status": "ACTIVE", "name": "Send curated CTM-form JSON track to Geo mapping system", "numberspace": "_system:numberspace/BQ24_COP", "destinations": [{"type": "KAFKA", "kafkaTopic": "tn-tracks"}, {"type": "WEB_SOCKET"}], "tnql": "* has source json", "executeOn": ["CREATE"], "description": "Jesse - this could go to NiFi via Kafka, or select Python destination and write somthing extract the TN value and push it somewhere", "tagOnTrigger": []}, {"id": "04bfc501-81bb-4d63-bd0f-390823e06047", "status": "ACTIVE", "name": "Enrich Tracks  with Mission Data", "numberspace": "_system:numberspace/BQ24_COP", "destinations": [{"type": "PYTHON_3", "script": "# v 5.0\n# Trigger script: add attribute TNs to COP numberspace \n# from Mission dat numberspace\n\nimport requests\nimport sys\nimport os\nimport io\nimport hashlib\nimport json\n\ntry:\n    tnRest = os.environ[\"TN_REST_API_BASE\"]\n    tnArtifact = os.environ[\"TN_ARTIFACT_API_BASE\"]\nexcept:\n    tnRest = \"http://truenumbers-rest-api:8080\"\n    tnArtifact = \"http://truenumbers-artifact-api:8081\"\n\nartifactSpace = \"BQ24_ARTIFACTS\"    # numberspace for file artifacts\ncopSpace = \"BQ24_COP\"                # numberspace for curated COP\nmissionSpace = \"BQ24_MISSION_DATA\"    # numberspace for static data\nstageSpace = \"BQ24_STAGING\"          # numberspace to stage tracks for curation\n\ndef curateFn():\n    # Loop over input TNs\n    # get incoming TN json value, correct for any enclosing quotes\n    tnsToPost = []\n\n    ############ FOR TEST\n    #testqry =  \"*position:current has dtg\"\n\n    #testTns = queryTns(copSpace, testqry,100,0)\n\n    ########### #END TEST\n    #for tn in testTns:\n    for tn in get_truenumber_input():\n\n        inputStr = tn[\"subject\"]\n\n        if inputStr[0] == '\"':\n            inputStr = inputStr[1:]\n        if inputStr[-1] == '\"':\n            inputStr = inputStr[:-1]\n\n        subject = pathOfPhrase(inputStr).replace(\"/position:current\",\"\").strip() \n\n        # look for unit attributes in MISSION_DATA, use their subject\n        deleteTns(copSpace,subject + \"# has * (unit attribute)\") #delete unit attribute TNs for subject\n        qry = subject + \"# has * (unit attribute)\"\n\n        invs = queryTns(missionSpace, qry,100,0)\n        tnProperties = set()\n        if invs != None and len(invs) > 0:\n            for theTn in invs:\n                tnProperties.add(pathOfPhrase(theTn[\"property\"]))\n            payload = {\"type\": \"TRUENUMBER_LIST\",\"truenumbers\":  invs}\n            parms = {\"numberspace\":copSpace}\n            res = requests.post(tnRest + \"/v2/numberflow/numbers\", \n                    params = parms, json = payload)\n\n        # now do class attributes\n\n        deleteTns(copSpace,subject + \"# has * (class attribute)\") #delete unit attribute TNs for subject\n        ofParts = subject.split(\"/\")\n        theClass = \"/\".join(ofParts[0:-1])\n        qry = theClass + \"# has * (class attribute)\"\n\n        invs = queryTns(missionSpace, qry,100,0)\n\n        if invs != None and len(invs) > 0:\n            fixedInvs = []\n            for atn in invs:\n                atnSub = atn[\"subject\"]\n                if \"/\" in atnSub:\n                    atn['subject'] = subject + \"/\" + atnSub.split(\"/\")[-1]\n                else:\n                    atn[\"subject\"] = subject\n\n                if atn[\"property\"] not in tnProperties:\n                    fixedInvs.append(atn)\n            payload = {\"type\": \"TRUENUMBER_LIST\",\"truenumbers\":  fixedInvs}\n            parms = {\"numberspace\":copSpace}\n            res = requests.post(tnRest + \"/v2/numberflow/numbers\", \n                    params = parms, json = payload)\n\n        # now do tagging\n        qry = \"* has query:tag:apply\"\n\n        invs = queryTns(missionSpace, qry,100,0)\n\n        if invs != None and len(invs) > 0:\n            for tagger in invs:\n                theTag = tagger[\"subject\"]\n                theQuery = tagger[\"value\"][\"value\"]\n                theQuery = str(theQuery)[1:-1]\n                theQuery = subject + theQuery\n                payload = {\n                              \"addTags\": [\n                               theTag\n                              ],\n                              \"removeTags\": [\n                              ],\n                              \"tnql\": theQuery\n                            }\n                parms={\"numberspace\":copSpace}\n                res = requests.patch(tnRest + \"/v2/numberflow/numbers/tags\", params=parms, json = payload)\n                print(theQuery,\" \",theTag)\n\n\n    ### END Script function ####\n\nutils = '''\n## TN Utilities for Trigger Scripts 2.0\n\n## Start with imports and getting system context\n\nimport requests\nimport json\nimport time\nimport os\nimport sys\nimport difflib\nimport hashlib\nimport base64\nimport re\n\n## phrase to path\ndef pathOfPhrase(phrase):\n    spacePhrase = re.sub(r\"\\s+\",\" \",phrase)\n    pList = spacePhrase.split(\" \")\n    pList.reverse()\n    return \":\".join(pList).replace(\":of:\",\"/\").replace(\":OF:\",\"/\")\n\n## Return list of queried TNs or Null if error\ndef queryTns(nSpace, theQuery, limit, offset):\n    parms = { \"numberspace\":nSpace,\"limit\":limit,\"offset\":offset}\n    res = requests.post(tnRest + \"/v2/numberflow/tnql\", \n                params = parms,\n                data = {\"tnql\":theQuery})\n    if res.status_code == 200:\n        return res.json()[\"truenumbers\"]\n    else:\n        return None\n\n## Post tns from one text string of statmenets and return HTTP return code\ndef postTns(nSpace, tnString):\n    if tnString.strip()[0] != \"{\":\n        payload = { \"trueStatement\" : tnString, \"noReturn\":True}\n    else:\n        payload = tnString\n    parms = {\"numberspace\":nSpace}\n    res = requests.post(tnRest + \"/v2/numberflow/numbers\", \n                params = parms, data = payload)\n    return res.status_code\n\n## Post tns from one text string with list of tags\ndef postTaggedTns(nSpace, tnString, tags):\n    if tnString.strip()[0] != \"{\":\n        payload = { \"trueStatement\" : tnString, \"noReturn\":True, \"tags\":tags}\n    else:\n        payload = tnString\n    \n    parms = {\"numberspace\":nSpace}\n    res = requests.post(tnRest + \"/v2/numberflow/numbers\", \n                params = parms, data = payload)\n    return res.status_code\n\n## DELETE tns matching a query\ndef deleteTns(nSpace, theQuery):\n    parms = { \"numberspace\":nSpace}\n    res = requests.delete(tnRest + \"/v2/numberflow/numbers\", \n                params = parms,\n                json = {\"tnql\":theQuery})\n    return res.status_code\n\n## get date string from epoch time\ndef dtgDate(dtgNum):\n    tx = dtgNum\n    if tx > 1e11:\n        tx = tx // 1000\n    time1 =  time.gmtime(tx)\n    return time.strftime(\"%Y-%m-%dT%H:%M\", time1)\n    \n## Find best match for a string from a list of candidates ##\n##  Returns dict with matching string, its index, and its score (1.0 is perfect match)\n##  Returns None if scores below 0.25\n\ndef bestMatch(inputString, candidateList):\n    inputUpper = inputString.upper().replace(\"_\",\" \")\n    if len(inputUpper) < 4:\n        return None\n    score = 0\n    matchIndex = -1\n    currentBest = \"\"\n    index = 0\n    for candidate in candidateList:\n        if candidate.endswith(\" \" + inputUpper):\n            newScore = 0.9\n        elif candidate == inputUpper.strip():\n            newScore = 1.0\n        else:\n            matcher = difflib.SequenceMatcher(None, inputUpper, candidate)\n            newScore = matcher.ratio()\n        if newScore > score:\n            score = newScore\n            currentBest = candidate\n            matchIndex = index\n        index = index + 1\n    if score > 0.25:\n        return {\"match\":currentBest, \"index\":matchIndex,\"score\":score}\n    else:\n        return None\n\n## Get artifact with a query to the artifact numberspace\n\ndef getArtifactByQuery(nSpace, theQuery):\n    res = requests.post(tnRest + \"/v2/numberflow/tnql\", \n    params =  { \"numberspace\":nSpace},\n    data = {\"tnql\":theQuery})\n    returnedTns = res.json()[\"truenumbers\"]\n    if res.status_code == 200:\n        if len(returnedTns) > 0:\n            fileGuid = res.json()[\"truenumbers\"][0][\"value\"][\"value\"]\n            fileRes = requests.get(tnArtifact + \"/v1/artifact/\" + fileGuid)\n            if fileRes.status_code == 200:\n                return fileRes.text\n    return None\n\n## Get artifact by Id\ndef getArtifact(fileId, isText):\n    fileRes = requests.get(tnArtifact + \"/v1/artifact/\" + fileId)\n    if fileRes.status_code == 200:\n        if isText:\n            return fileRes.text\n        else:\n            return fileRes.content\n    else:\n        return None\n\n## DELETE artifact by id\n## Get artifact by Id\ndef deleteArtifact(fileId):\n    fileRes = requests.delete(tnArtifact + \"/v1/artifact/\" + fileId)\n    if fileRes.status_code == 200:\n        return fileRes.text\n    else:\n        return None\n\n## Put artifact as TN from string data\ndef putArtifactTnFromString(fName, stringData, artifactId):\n    in_memory_file = io.StringIO(stringData)\n    in_memory_file.name = fName\n    maybeId = \"\"\n    if artifactId != \"\":\n        maybeId = \"/\" + artifactId\n    res = requests.post(tnArtifact + \"/v1/artifact\" + maybeId,  files={\"artifact\":in_memory_file})\n    return res.json()[\"artifact\"]\n'''\n    \n### MAIN program\nexec(utils)\ncurateFn()"}, {"type": "WEB_SOCKET"}], "tnql": "*position:current has dtg", "executeOn": ["CREATE"], "description": "", "tagOnTrigger": []}, {"id": "1f1f9595-2601-4109-9325-06e814d79bc6", "status": "ACTIVE", "name": "Archive for Medusa", "numberspace": "_system:numberspace/BQ24_COP", "destinations": [{"type": "PYTHON_3", "script": "# Trigger script: Copy source json TN from COP to MEDUSA_DATA 1.0\n\nimport requests\nimport sys\nimport os\n\ntry:\n    tnRest = os.environ[\"TN_REST_API_BASE\"]\nexcept:\n    tnRest = \"http://truenumbers-rest-api:8080\"\n\npayload = {\"type\": \"TRUENUMBER_LIST\",\"truenumbers\":  get_truenumber_input()}\nparms = {\"numberspace\":\"MEDUSA_DATA\"}\nres = requests.post(tnRest + \"/v2/numberflow/numbers\", \n            params = parms, json = payload)\n"}, {"type": "WEB_SOCKET"}], "tnql": "* has source json", "executeOn": ["CREATE"], "description": "copies curated source json TNs to MEDUSA_DATA numberspace", "tagOnTrigger": []}]}